@model WestendMotors.Models.ConvertTradeInViewModel
@{
    ViewBag.Title = "Convert Trade-In to Vehicle";
    Layout = "~/Views/Shared/_Layout.cshtml";

    // Get recurrence options for dropdown
    var recurrenceOptions = new SelectList(new[] { "Monthly", "Quarterly", "6 Months", "Yearly" });

    // Options for specs dropdowns
    var fuelTypeOptions = new SelectList(new[] { "Petrol", "Diesel", "Hybrid", "Electric", "LPG" });
    var transmissionOptions = new SelectList(new[] { "Manual", "Automatic", "Semi-Automatic", "CVT" });
    var bodyTypeOptions = new SelectList(new[] { "Sedan", "Hatchback", "SUV", "Crossover", "Coupe", "Convertible", "Station Wagon", "Pickup Truck", "Van", "Minibus", "Sports Car" });
    var engineSizeOptions = new SelectList(new[] { "1.0", "1.2", "1.4", "1.6", "1.8", "2.0", "2.2", "2.4", "2.5", "3.0", "3.5", "4.0", "5.0" });
    var seatsOptions = new SelectList(new[] { 2, 4, 5, 7, 8, 9 });
}

<div class="container mt-4">
    <!-- Page Header -->
    <div class="page-header mb-4">
        <div class="d-flex align-items-center">
            <div class="header-icon">
                <i class="fas fa-exchange-alt"></i>
            </div>
            <div>
                <h1 class="mb-1">Convert Trade-In to Vehicle</h1>
                <p class="text-muted mb-0">Create vehicle listing from trade-in #@Model.TradeInRequestId and assign to customer</p>
            </div>
        </div>
    </div>

    @using (Html.BeginForm("ConvertToVehicle", "TradeInRequests", FormMethod.Post))
    {
        @Html.AntiForgeryToken()
        @Html.HiddenFor(model => model.TradeInRequestId)
        @Html.HiddenFor(model => model.UserId)
        @Html.HiddenFor(model => model.CustomerId)

        <div class="row">
            <!-- Left Column: Basic Vehicle Info -->
            <div class="col-lg-6">
                <!-- Basic Information Card -->
                <div class="vehicle-details-card mb-4">
                    <div class="card-header">
                        <h5><i class="fas fa-info-circle me-2"></i>Basic Information</h5>
                        <p class="mb-0 text-muted">Vehicle title, description, and pricing</p>
                    </div>
                    <div class="card-body">
                        <div class="form-group">
                            @Html.LabelFor(model => model.Title, new { @class = "form-label required" })
                            <div class="input-group">
                                <div class="input-icon">
                                    <i class="fas fa-heading"></i>
                                </div>
                                @Html.TextBoxFor(model => model.Title, new
                                {
                                    @class = "form-control",
                                    required = "required",
                                    placeholder = "e.g., 2020 Toyota Corolla 1.8 Prestige"
                                })
                            </div>
                            @Html.ValidationMessageFor(model => model.Title)
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Description, new { @class = "form-label" })
                            <div class="input-group">
                                <div class="input-icon">
                                    <i class="fas fa-file-alt"></i>
                                </div>
                                @Html.TextAreaFor(model => model.Description, new
                                {
                                    @class = "form-control",
                                    rows = "3",
                                    placeholder = "Describe the vehicle's features, condition, and history..."
                                })
                            </div>
                            @Html.ValidationMessageFor(model => model.Description)
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.Price, new { @class = "form-label required" })
                            <div class="input-group">
                                <div class="input-icon">
                                    <i class="fas fa-dollar-sign"></i>
                                </div>
                                @Html.TextBoxFor(model => model.Price, new
                                {
                                    @class = "form-control",
                                    type = "number",
                                    step = "1000",
                                    min = "0",
                                    required = "required",
                                    placeholder = "250000"
                                })
                            </div>
                            <small class="form-text">
                                Based on trade-in offer: R @((Model.FinalOffer ?? Model.EstimatedValue ?? 0).ToString("N0"))
                            </small>
                            @Html.ValidationMessageFor(model => model.Price)
                        </div>
                    </div>
                </div>

                <!-- Vehicle Specifications Card -->
                <div class="specs-card mb-4">
                    <div class="card-header">
                        <h5><i class="fas fa-cogs me-2"></i>Vehicle Specifications</h5>
                        <p class="mb-0 text-muted">Technical details and features</p>
                    </div>
                    <div class="card-body">
                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Make, new { @class = "form-label required" })
                                    @Html.TextBoxFor(model => model.Make, new
                                    {
                                        @class = "form-control",
                                        required = "required",
                                        placeholder = "e.g., Toyota"
                                    })
                                    @Html.ValidationMessageFor(model => model.Make)
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Model, new { @class = "form-label required" })
                                    @Html.TextBoxFor(model => model.Model, new
                                    {
                                        @class = "form-control",
                                        required = "required",
                                        placeholder = "e.g., Corolla"
                                    })
                                    @Html.ValidationMessageFor(model => model.Model)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Year, new { @class = "form-label required" })
                                    @Html.TextBoxFor(model => model.Year, new
                                    {
                                        @class = "form-control",
                                        type = "number",
                                        min = "1990",
                                        max = "2025",
                                        required = "required",
                                        placeholder = "2020"
                                    })
                                    @Html.ValidationMessageFor(model => model.Year)
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Mileage, new { @class = "form-label required" })
                                    <div class="input-group">
                                        @Html.TextBoxFor(model => model.Mileage, new
                                        {
                                            @class = "form-control",
                                            type = "number",
                                            min = "0",
                                            required = "required",
                                            placeholder = "50000"
                                        })
                                        <div class="input-suffix">km</div>
                                    </div>
                                    @Html.ValidationMessageFor(model => model.Mileage)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.FuelType, new { @class = "form-label required" })
                                    @Html.DropDownListFor(model => model.FuelType, fuelTypeOptions, "Select Fuel Type", new
                                    {
                                        @class = "form-control",
                                        required = "required"
                                    })
                                    @Html.ValidationMessageFor(model => model.FuelType)
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Transmission, new { @class = "form-label required" })
                                    @Html.DropDownListFor(model => model.Transmission, transmissionOptions, "Select Transmission", new
                                    {
                                        @class = "form-control",
                                        required = "required"
                                    })
                                    @Html.ValidationMessageFor(model => model.Transmission)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.Color, new { @class = "form-label" })
                                    @Html.TextBoxFor(model => model.Color, new
                                    {
                                        @class = "form-control",
                                        placeholder = "e.g., Red"
                                    })
                                    @Html.ValidationMessageFor(model => model.Color)
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.EngineSize, new { @class = "form-label" })
                                    @Html.DropDownListFor(model => model.EngineSize, engineSizeOptions, "Select Engine Size", new
                                    {
                                        @class = "form-control"
                                    })
                                    @Html.ValidationMessageFor(model => model.EngineSize)
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.NumberOfSeats, new { @class = "form-label required" })
                                    @Html.DropDownListFor(model => model.NumberOfSeats, seatsOptions, "Select Seats", new
                                    {
                                        @class = "form-control",
                                        required = "required"
                                    })
                                    @Html.ValidationMessageFor(model => model.NumberOfSeats)
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group">
                                    @Html.LabelFor(model => model.BodyType, new { @class = "form-label required" })
                                    @Html.DropDownListFor(model => model.BodyType, bodyTypeOptions, "Select Body Type", new
                                    {
                                        @class = "form-control",
                                        required = "required"
                                    })
                                    @Html.ValidationMessageFor(model => model.BodyType)
                                </div>
                            </div>
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.ConditionNotes, new { @class = "form-label" })
                            @Html.TextAreaFor(model => model.ConditionNotes, new
                            {
                                @class = "form-control",
                                rows = "3",
                                placeholder = "Describe the vehicle's condition, any repairs needed, maintenance history..."
                            })
                            @Html.ValidationMessageFor(model => model.ConditionNotes)
                        </div>

                        <div class="form-group">
                            @Html.LabelFor(model => model.FeatureList, new { @class = "form-label" })
                            @Html.TextAreaFor(model => model.FeatureList, new
                            {
                                @class = "form-control",
                                rows = "3",
                                placeholder = "List features separated by commas: Air Conditioning, Bluetooth, Cruise Control, etc."
                            })
                            @Html.ValidationMessageFor(model => model.FeatureList)
                        </div>
                    </div>
                </div>
            </div>

            <!-- Right Column: Assignment Options -->
            <div class="col-lg-6">
                <!-- Customer Assignment Card -->
                <div class="assignment-card mb-4">
                    <div class="card-header">
                        <h5><i class="fas fa-user-check me-2"></i>Customer Assignment</h5>
                        <p class="mb-0 text-muted">Configure ownership and service details</p>
                    </div>
                    <div class="card-body">
                        <div class="assignment-toggle mb-4">
                            <div class="form-check">
                                @Html.CheckBoxFor(model => model.AssignToCustomer, new
                                {
                                    @class = "form-check-input",
                                    id = "assignToCustomer"
                                })
                                <label class="form-check-label" for="assignToCustomer">
                                    <strong>Assign to @Model.CustomerName</strong>
                                </label>
                            </div>
                            <small class="form-text">Uncheck to create vehicle without assignment</small>
                        </div>

                        <div id="assignmentFields">
                            <div class="form-group">
                                @Html.LabelFor(model => model.PurchaseDate, new { @class = "form-label" })
                                <div class="input-group">
                                    <div class="input-icon">
                                        <i class="fas fa-calendar-alt"></i>
                                    </div>
                                    @Html.TextBoxFor(model => model.PurchaseDate, "{0:yyyy-MM-dd}", new
                                    {
                                        @class = "form-control",
                                        type = "date"
                                    })
                                </div>
                                @Html.ValidationMessageFor(model => model.PurchaseDate)
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.RecurrenceType, new { @class = "form-label" })
                                <div class="input-group">
                                    <div class="input-icon">
                                        <i class="fas fa-sync-alt"></i>
                                    </div>
                                    @Html.DropDownListFor(model => model.RecurrenceType, recurrenceOptions, "Select recurrence", new { @class = "form-control" })
                                </div>
                                @Html.ValidationMessageFor(model => model.RecurrenceType)
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.NextServiceDate, new { @class = "form-label" })
                                <div class="input-group">
                                    <div class="input-icon">
                                        <i class="fas fa-calendar-check"></i>
                                    </div>
                                    @Html.TextBoxFor(model => model.NextServiceDate, "{0:yyyy-MM-dd}", new
                                    {
                                        @class = "form-control",
                                        type = "date"
                                    })
                                </div>
                                @Html.ValidationMessageFor(model => model.NextServiceDate)
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.ServiceNotes, new { @class = "form-label" })
                                @Html.TextAreaFor(model => model.ServiceNotes, new
                                {
                                    @class = "form-control",
                                    rows = "2",
                                    placeholder = "Service instructions or notes..."
                                })
                                @Html.ValidationMessageFor(model => model.ServiceNotes)
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.AssignmentNotes, new { @class = "form-label" })
                                @Html.TextAreaFor(model => model.AssignmentNotes, new
                                {
                                    @class = "form-control",
                                    rows = "2",
                                    placeholder = "Additional assignment notes..."
                                })
                                @Html.ValidationMessageFor(model => model.AssignmentNotes)
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Trade-In Summary -->
                <div class="summary-card mb-4">
                    <div class="card-header">
                        <h6><i class="fas fa-info-circle me-2"></i>Trade-In Summary</h6>
                    </div>
                    <div class="card-body">
                        <div class="summary-item">
                            <span class="summary-label">Customer:</span>
                            <span class="summary-value">@Model.CustomerName</span>
                        </div>
                        <div class="summary-item">
                            <span class="summary-label">Original Vehicle:</span>
                            <span class="summary-value">@Model.Year @Model.Make @Model.Model</span>
                        </div>
                        <div class="summary-item">
                            <span class="summary-label">Final Offer:</span>
                            <span class="summary-value">R @(Model.FinalOffer?.ToString("N0") ?? "N/A")</span>
                        </div>
                        <div class="summary-item">
                            <span class="summary-label">Status:</span>
                            <span class="status-badge status-approved">@Model.Status</span>
                        </div>
                    </div>
                </div>

                <!-- Image Preview -->
                @if (Model.Images != null && Model.Images.Any())
                {
                    <div class="images-card">
                        <div class="card-header">
                            <h6><i class="fas fa-images me-2"></i>Images (@Model.Images.Count())</h6>
                        </div>
                        <div class="card-body">
                            <div class="image-preview-grid">
                                @foreach (var image in Model.Images.Take(4))
                                {
                                    <img src="@Url.Content(image.ImagePath)" class="preview-image"
                                         alt="Vehicle image" onerror="this.style.display='none'" />
                                }
                                @if (Model.Images.Count > 4)
                                {
                                    <div class="preview-more">+@(Model.Images.Count - 4) more</div>
                                }
                            </div>
                            <small class="form-text mt-2">All @Model.Images.Count images will be transferred to the new vehicle listing</small>
                        </div>
                    </div>
                }
            </div>
        </div>

        <!-- Action Buttons -->
        <div class="form-actions">
            <button type="submit" class="btn btn-success btn-lg">
                <i class="fas fa-check me-2"></i>Convert & Create Vehicle Listing
            </button>
            @Html.ActionLink("Cancel", "Details", new { id = Model.TradeInRequestId },
                new { @class = "btn btn-outline-secondary btn-lg" })
        </div>
    }
</div>

@section Scripts {
    <script>
        $(document).ready(function () {
            // Set default values if empty
            setDefaultValues();

            // Toggle assignment fields
            $('#assignToCustomer').change(function () {
                $('#assignmentFields').toggle(this.checked);
            }).trigger('change');

            // Set default dates if empty
            setDefaultDates();

            // Auto-calculate next service date
            setupServiceDateCalculation();
        });

        function setDefaultValues() {
            if (!$('#Title').val()) {
                $('#Title').val('@($"{Model.Year} {Model.Make} {Model.Model}")');
            }

            if (!$('#Description').val()) {
                $('#Description').val('Trade-in vehicle from @Model.CustomerName. Condition: @Model.ConditionNotes');
            }

            if (!$('#Price').val()) {
                $('#Price').val('@(Model.FinalOffer ?? Model.EstimatedValue ?? 0)');
            }
        }

        function setDefaultDates() {
            if (!$('#PurchaseDate').val()) {
                var today = new Date().toISOString().split('T')[0];
                $('#PurchaseDate').val(today);
            }

            if (!$('#NextServiceDate').val()) {
                var sixMonths = new Date();
                sixMonths.setMonth(sixMonths.getMonth() + 6);
                var sixMonthsFormatted = sixMonths.toISOString().split('T')[0];
                $('#NextServiceDate').val(sixMonthsFormatted);
            }
        }

        function setupServiceDateCalculation() {
            $('#RecurrenceType').change(function () {
                var purchaseDate = new Date($('#PurchaseDate').val());
                if (isNaN(purchaseDate)) return;

                var recurrence = $(this).val();
                var nextServiceDate = new Date(purchaseDate);

                switch (recurrence) {
                    case 'Monthly':
                        nextServiceDate.setMonth(purchaseDate.getMonth() + 1);
                        break;
                    case 'Quarterly':
                        nextServiceDate.setMonth(purchaseDate.getMonth() + 3);
                        break;
                    case '6 Months':
                        nextServiceDate.setMonth(purchaseDate.getMonth() + 6);
                        break;
                    case 'Yearly':
                        nextServiceDate.setFullYear(purchaseDate.getFullYear() + 1);
                        break;
                }

                var formattedDate = nextServiceDate.toISOString().split('T')[0];
                $('#NextServiceDate').val(formattedDate);
            });

            $('#PurchaseDate').change(function () {
                $('#RecurrenceType').trigger('change');
            });
        }
    </script>
}

@section Styles {
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">
    <style>
        /* Matching Dashboard Theme - Clean Automotive Design */
        :root {
            --primary-color: #2c3e50;
            --secondary-color: #34495e;
            --accent-color: #3498db;
            --success-color: #27ae60;
            --warning-color: #f39c12;
            --danger-color: #e74c3c;
            --light-bg: #f8f9fa;
            --card-bg: #ffffff;
            --text-dark: #2c3e50;
            --text-muted: #7f8c8d;
            --border-color: #e1e8ed;
            --shadow: 0 2px 10px rgba(0,0,0,0.08);
            --shadow-hover: 0 4px 20px rgba(0,0,0,0.12);
        }

        body {
            background-color: var(--light-bg);
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            color: var(--text-dark);
        }

        /* Page Header */
        .page-header {
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 2rem;
            border-radius: 12px;
            margin-bottom: 2rem;
        }

        .header-icon {
            background: rgba(255,255,255,0.2);
            border-radius: 12px;
            width: 60px;
            height: 60px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1.5rem;
            font-size: 1.5rem;
        }

        .page-header h1 {
            font-size: 2rem;
            font-weight: 700;
            margin: 0;
        }

        /* Card Styling */
        .vehicle-details-card,
        .assignment-card,
        .summary-card,
        .images-card {
            background: var(--card-bg);
            border-radius: 12px;
            box-shadow: var(--shadow);
            overflow: hidden;
        }

        .card-header {
            background: #f8f9fa;
            padding: 1.5rem;
            border-bottom: 1px solid var(--border-color);
        }

            .card-header h5,
            .card-header h6 {
                margin: 0 0 0.5rem 0;
                font-weight: 600;
                color: var(--text-dark);
                display: flex;
                align-items: center;
                font-size: 1.25rem;
            }

            .card-header h6 {
                font-size: 1rem;
            }

        .card-body {
            padding: 2rem;
        }

        /* Vehicle Specs Display */
        .specs-summary {
            background: #f8f9fa;
            padding: 1.25rem;
            border-radius: 8px;
        }

        .spec-row {
            display: flex;
            gap: 1rem;
            margin-bottom: 0.75rem;
        }

            .spec-row:last-child {
                margin-bottom: 0;
            }

        .spec-item {
            flex: 1;
            display: flex;
            align-items: center;
            gap: 0.5rem;
            background: white;
            padding: 0.75rem;
            border-radius: 6px;
            box-shadow: 0 1px 3px rgba(0,0,0,0.1);
        }

            .spec-item i {
                color: var(--accent-color);
                width: 16px;
                text-align: center;
            }

        .spec-label {
            font-size: 0.8rem;
            color: var(--text-muted);
            margin-right: auto;
        }

        .spec-value {
            font-weight: 600;
            color: var(--text-dark);
            font-size: 0.9rem;
        }

        /* Form Styling */
        .form-group {
            margin-bottom: 1.75rem;
        }

        .form-label {
            font-weight: 600;
            margin-bottom: 0.75rem;
            color: var(--text-dark);
            font-size: 0.95rem;
            display: flex;
            align-items: center;
        }

            .form-label.required::after {
                content: ' *';
                color: var(--danger-color);
                margin-left: 0.25rem;
            }

        .input-group {
            position: relative;
        }

        .input-icon {
            position: absolute;
            left: 12px;
            top: 50%;
            transform: translateY(-50%);
            color: var(--text-muted);
            z-index: 5;
            font-size: 0.9rem;
        }

        .form-control {
            border: 2px solid var(--border-color);
            border-radius: 8px;
            padding: 0.875rem 1rem;
            font-size: 0.95rem;
            transition: all 0.2s ease;
            width: 100%;
        }

        .input-group .form-control {
            padding-left: 2.75rem;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--accent-color);
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.1);
        }

        .form-control:hover {
            border-color: #c1c9d0;
        }

        /* Textarea specific styling */
        textarea.form-control {
            resize: vertical;
            min-height: 80px;
        }

        /* Select dropdown styling */
        select.form-control {
            background-image: url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' fill='none' viewBox='0 0 20 20'%3e%3cpath stroke='%236b7280' stroke-linecap='round' stroke-linejoin='round' stroke-width='1.5' d='m6 8 4 4 4-4'/%3e%3c/svg%3e");
            background-position: right 0.75rem center;
            background-repeat: no-repeat;
            background-size: 1.5em 1.5em;
            padding-right: 2.5rem;
            appearance: none;
        }

        .form-text {
            font-size: 0.8rem;
            color: var(--text-muted);
            margin-top: 0.5rem;
        }

        /* Assignment Toggle */
        .assignment-toggle {
            background: rgba(52, 152, 219, 0.05);
            padding: 1rem;
            border-radius: 8px;
            border: 1px solid rgba(52, 152, 219, 0.2);
        }

        .form-check {
            display: flex;
            align-items: center;
        }

        .form-check-input {
            width: 1.25rem;
            height: 1.25rem;
            margin-right: 0.75rem;
            margin-top: 0;
        }

        .form-check-label {
            margin-bottom: 0;
            font-size: 1rem;
            color: var(--text-dark);
        }

        /* Summary Items */
        .summary-item {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 0.75rem 0;
            border-bottom: 1px solid #f1f3f4;
        }

            .summary-item:last-child {
                border-bottom: none;
            }

        .summary-label {
            font-weight: 600;
            color: var(--text-dark);
        }

        .summary-value {
            color: var(--text-muted);
        }

        /* Status Badge */
        .status-badge {
            padding: 0.4rem 0.8rem;
            border-radius: 20px;
            font-size: 0.75rem;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        .status-approved {
            background: rgba(39, 174, 96, 0.15);
            color: var(--success-color);
            border: 1px solid rgba(39, 174, 96, 0.3);
        }

        /* Image Preview */
        .image-preview-grid {
            display: grid;
            grid-template-columns: repeat(2, 1fr);
            gap: 0.75rem;
            margin-bottom: 1rem;
        }

        .preview-image {
            width: 100%;
            height: 100px;
            object-fit: cover;
            border-radius: 8px;
            border: 2px solid var(--border-color);
            transition: all 0.2s ease;
        }

            .preview-image:hover {
                border-color: var(--accent-color);
                transform: scale(1.02);
            }

        .preview-more {
            display: flex;
            align-items: center;
            justify-content: center;
            background: #f8f9fa;
            border-radius: 8px;
            border: 2px dashed var(--border-color);
            font-weight: 600;
            color: var(--text-muted);
            height: 100px;
        }

        /* Form Actions */
        .form-actions {
            display: flex;
            gap: 1rem;
            justify-content: center;
            margin-top: 3rem;
            padding: 2rem;
            background: linear-gradient(135deg, #f8f9fa, #ecf0f1);
            border-radius: 12px;
            border: 1px solid var(--border-color);
        }

        /* Button Styling */
        .btn {
            font-weight: 600;
            padding: 0.875rem 1.75rem;
            border-radius: 8px;
            transition: all 0.2s ease;
            border: none;
            cursor: pointer;
            font-size: 0.95rem;
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            justify-content: center;
        }

        .btn-success {
            background: var(--success-color);
            color: white;
        }

            .btn-success:hover {
                background: #219a52;
                transform: translateY(-2px);
                box-shadow: var(--shadow-hover);
                color: white;
                text-decoration: none;
            }

        .btn-outline-secondary {
            background: transparent;
            color: var(--text-muted);
            border: 2px solid var(--border-color);
        }

            .btn-outline-secondary:hover {
                background: var(--secondary-color);
                border-color: var(--secondary-color);
                color: white;
                text-decoration: none;
                transform: translateY(-2px);
            }

        .btn-lg {
            padding: 1rem 2rem;
            font-size: 1rem;
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .page-header {
                padding: 1.5rem;
                text-align: center;
            }

                .page-header .d-flex {
                    flex-direction: column;
                    align-items: center;
                }

            .header-icon {
                margin: 0 auto 1rem auto;
            }

            .card-header,
            .card-body {
                padding: 1.5rem;
            }

            .spec-row {
                flex-direction: column;
                gap: 0.5rem;
            }

            .form-actions {
                flex-direction: column;
                padding: 1.5rem;
            }

            .btn {
                width: 100%;
                justify-content: center;
            }

            .image-preview-grid {
                grid-template-columns: 1fr;
            }
        }

        @@media (max-width: 576px) {
            .form-actions {
                gap: 0.75rem;
            }

            .btn-lg {
                padding: 0.875rem 1.5rem;
            }

            .page-header h1 {
                font-size: 1.5rem;
            }

            .card-header h5 {
                font-size: 1.1rem;
            }

            .preview-image {
                height: 80px;
            }

            .preview-more {
                height: 80px;
            }
        }

        /* Focus styles for accessibility */
        .btn:focus,
        .form-control:focus {
            outline: none;
            box-shadow: 0 0 0 3px rgba(52, 152, 219, 0.25);
        }

        /* Animation for page load */
        .vehicle-details-card,
        .assignment-card,
        .summary-card,
        .images-card {
            animation: fadeInUp 0.6s ease-out;
        }

        @@keyframes fadeInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }

            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Loading states */
        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
            transform: none !important;
        }

            .btn:disabled:hover {
                transform: none !important;
            }

        /* Input focus enhancements */
        .form-control:focus + .input-icon {
            color: var(--accent-color);
        }

        /* Better spacing for icon labels */
        .form-label i {
            margin-right: 0.5rem;
            width: 16px;
            text-align: center;
        }
    </style>
}